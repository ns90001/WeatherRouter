{"ast":null,"code":"var _jsxFileName = \"/Users/naveen/cs0320/term-project-amanjal-igurland-jpate-nsharm25/frontend/src/LocationInput.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LocationInput(props) {\n  function handleChange(newAddress) {\n    props.setVal(newAddress);\n  }\n\n  ;\n\n  function handleSelect(newAddress) {\n    props.setVal(newAddress);\n    geocodeByAddress(newAddress).then(results => getLatLng(results[0])).then(latLng => {\n      props.toUpdate.current = {\n        address: newAddress,\n        coords: [latLng.lat, latLng.lng]\n      };\n      console.log('Success', props.toUpdate.current);\n    }).catch(error => {\n      props.setVal(\"\");\n      console.error('Error', error);\n    });\n  }\n\n  ;\n  const searchOptions = {\n    location: new window.google.maps.LatLng(41.731744, -71.564708),\n    radius: 50000,\n    types: ['address']\n  };\n  return /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n    value: props.val,\n    onChange: handleChange,\n    onSelect: handleSelect,\n    className: \"locationInput\",\n    searchOptions: searchOptions,\n    children: ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n          placeholder: props.placeholder,\n          className: 'location-search-input'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"autocomplete-dropdown-container\",\n        children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 37\n        }, this), suggestions.map(suggestion => {\n          const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item';\n          const style = suggestion.active ? {\n            backgroundColor: 'lightblue',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n              className,\n              style\n            }),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: suggestion.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_c = LocationInput;\nexport default LocationInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationInput\");","map":{"version":3,"sources":["/Users/naveen/cs0320/term-project-amanjal-igurland-jpate-nsharm25/frontend/src/LocationInput.js"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","LocationInput","props","handleChange","newAddress","setVal","handleSelect","then","results","latLng","toUpdate","current","address","coords","lat","lng","console","log","catch","error","searchOptions","location","window","google","maps","LatLng","radius","types","val","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\n\nfunction LocationInput(props) {\n\n    function handleChange(newAddress) {\n        props.setVal(newAddress);\n\n    };\n\n    function handleSelect(newAddress) {\n        props.setVal(newAddress);\n        geocodeByAddress(newAddress)\n            .then(results => getLatLng(results[0]))\n            .then(latLng => {\n                props.toUpdate.current = {\n                    address: newAddress,\n                    coords: [latLng.lat, latLng.lng]\n                }\n                console.log('Success', props.toUpdate.current)\n            })\n            .catch(error => {\n                props.setVal(\"\");\n                console.error('Error', error)\n            });\n    };\n\n    const searchOptions = {\n        location: new window.google.maps.LatLng(41.731744, -71.564708),\n        radius: 50000,\n        types: ['address']\n    }\n\n    return (\n        <PlacesAutocomplete\n            value={props.val}\n            onChange={handleChange}\n            onSelect={handleSelect}\n            className={\"locationInput\"}\n            searchOptions={searchOptions}\n        >\n            {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                <div>\n                    <input\n                        {...getInputProps({\n                            placeholder: props.placeholder,\n                            className: 'location-search-input',\n                        })}\n                    />\n                    <div className=\"autocomplete-dropdown-container\">\n                        {loading && <div>Loading...</div>}\n                        {suggestions.map(suggestion => {\n                            const className = suggestion.active\n                                ? 'suggestion-item--active'\n                                : 'suggestion-item';\n                            const style = suggestion.active\n                                ? { backgroundColor: 'lightblue', cursor: 'pointer' }\n                                : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                            return (\n                                <div\n                                    {...getSuggestionItemProps(suggestion, {\n                                        className,\n                                        style,\n                                    })}\n                                >\n                                    <span>{suggestion.description}</span>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            )}\n        </PlacesAutocomplete>\n    );\n}\n\nexport default LocationInput;"]},"metadata":{},"sourceType":"module"}