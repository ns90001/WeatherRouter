{"ast":null,"code":"var _jsxFileName = \"/Users/naveen/cs0320/term-project-amanjal-igurland-jpate-nsharm25/frontend/src/Results.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useRef } from \"react\";\nimport Map from \"./Map\";\nimport { Image, WbCloudy, WbSunny } from \"@material-ui/icons\";\nimport { mdiWeatherPouring, mdiWeatherSnowy, mdiWeatherLightning, mdiWeatherFog } from '@mdi/js';\nimport { Icon } from \"@mdi/react\";\nimport { colors, rgbToHex } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Results(props) {\n  _s();\n\n  const formattedRoute = useRef([]);\n  const formattedWeatherRoute = useRef([]);\n  const weatherData = useRef([]);\n  const newWeatherData = useRef([]);\n  const newWeatherText = useRef(\"\");\n  const weatherText = useRef(\"\");\n  const displayNewWeather = useRef(null);\n  const newWeatherBtn = useRef(null);\n  const weatherTiles = useRef([]);\n  const newWeatherTiles = useRef([]);\n  let route;\n  let weatherRoute;\n\n  function convertToCelsius(temp) {\n    return Math.round((temp - 32) * (5 / 9));\n  }\n\n  useEffect(() => {\n    setTimeout(() => {\n      props.setUnits(\"C\");\n      props.setUnits(\"F\");\n    }, 10);\n  }, []);\n\n  function openInGMaps(route) {\n    let request_url = \"https://www.google.com/maps/dir/?api=1&travelmode=driving&origin=\" + route.current[0].lat + \"%2C\" + route.current[0].lng + \"&waypoints=\";\n    console.log(request_url); // generate url with directions param\n\n    for (let i = 1; i < route.current.length - 1; i++) {\n      request_url += route.current[i].lat + \"%2C\" + route.current[i].lng + \"%7C\";\n    }\n\n    request_url += \"&destination=\" + route.current[route.current.length - 1].lat + \"%2C\" + route.current[route.current.length - 1].lng;\n    window.open(request_url);\n  }\n\n  useEffect(() => {\n    console.log(props.location.state);\n    route = props.location.state.nameValuePairs.normal_route;\n    weatherRoute = props.location.state.nameValuePairs.weather_route;\n    weatherData.current = [];\n    weatherTiles.current = [];\n    newWeatherTiles.current = [];\n    formattedRoute.current = [];\n    formattedWeatherRoute.current = [];\n\n    for (let i = 0; i < route.length; i++) {\n      const newNode = {\n        lat: parseFloat(route[i].nameValuePairs.coords[0]),\n        lng: parseFloat(route[i].nameValuePairs.coords[1])\n      };\n      formattedRoute.current.push(newNode);\n      weatherData.current.push({\n        temp: route[i].nameValuePairs.weather.nameValuePairs[\"temp\"],\n        forecast: route[i].nameValuePairs.weather.nameValuePairs[\"forecast\"],\n        wind: route[i].nameValuePairs.weather.nameValuePairs[\"wind\"],\n        icon: route[i].nameValuePairs.weather.nameValuePairs[\"icon\"]\n      });\n      let temperature = parseFloat(route[i].nameValuePairs.weather.nameValuePairs[\"temp\"]);\n\n      if (props.unit == \"F\") {\n        temperature = convertToCelsius(temperature);\n      }\n\n      let unitText = \"ºF\";\n\n      if (props.unit == \"F\") {\n        unitText = \"ºC\";\n      }\n\n      let forecast = route[i].nameValuePairs.weather.nameValuePairs[\"forecast\"];\n\n      let icon = /*#__PURE__*/_jsxDEV(WbCloudy, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 24\n      }, this);\n\n      console.log(forecast);\n\n      if (forecast != undefined) {\n        if (forecast.toString().toLowerCase().includes(\"snow\")) {\n          icon = /*#__PURE__*/_jsxDEV(Icon, {\n            className: \"weatherIcon\",\n            path: mdiWeatherSnowy,\n            size: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 28\n          }, this);\n        } else if (forecast.toString().toLowerCase().includes(\"storm\")) {\n          icon = /*#__PURE__*/_jsxDEV(Icon, {\n            className: \"weatherIcon\",\n            path: mdiWeatherLightning,\n            size: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 28\n          }, this);\n        } else if (forecast.toString().toLowerCase().includes(\"fog\") || forecast.toString().includes(\"haze\")) {\n          icon = /*#__PURE__*/_jsxDEV(Icon, {\n            className: \"weatherIcon\",\n            path: mdiWeatherFog,\n            size: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 28\n          }, this);\n        } else if (forecast.toString().toLowerCase().includes(\"rain\")) {\n          icon = /*#__PURE__*/_jsxDEV(Icon, {\n            className: \"weatherIcon\",\n            path: mdiWeatherPouring,\n            size: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 28\n          }, this);\n        } else if (forecast.toString().toLowerCase().includes(\"sun\")) {\n          icon = /*#__PURE__*/_jsxDEV(WbSunny, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 28\n          }, this);\n        } else if (forecast.toString().toLowerCase().includes(\"cloud\")) {\n          icon = /*#__PURE__*/_jsxDEV(WbCloudy, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 28\n          }, this);\n        }\n\n        if (i > 1 && i < route.length - 1) {\n          if (weatherData[i] != weatherData[i - 1]) {\n            weatherTiles.current.push( /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"weatherTile\",\n              children: [route[i].nameValuePairs.coords, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, this), temperature + \" \" + unitText, icon, forecast]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this));\n          }\n        } else {\n          weatherTiles.current.push( /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"weatherTile\",\n            children: [route[i].nameValuePairs.coords, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 29\n            }, this), temperature + \" \" + unitText, icon, forecast]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this));\n        }\n      }\n    }\n\n    if (weatherRoute != undefined) {\n      for (let i = 0; i < weatherRoute.length; i++) {\n        const newNode = {\n          lat: parseFloat(weatherRoute[i].nameValuePairs.coords[0]),\n          lng: parseFloat(weatherRoute[i].nameValuePairs.coords[1])\n        };\n        formattedWeatherRoute.current.push(newNode);\n        newWeatherData.current.push({\n          temp: weatherRoute[i].nameValuePairs.weather.nameValuePairs[\"temp\"],\n          forecast: weatherRoute[i].nameValuePairs.weather.nameValuePairs[\"forecast\"],\n          wind: weatherRoute[i].nameValuePairs.weather.nameValuePairs[\"wind\"]\n        });\n        let temperature = parseFloat(weatherRoute[i].nameValuePairs.weather.nameValuePairs[\"temp\"]);\n\n        if (props.unit == \"F\") {\n          temperature = convertToCelsius(temperature);\n        }\n\n        let unitText = \"ºF\";\n\n        if (props.unit == \"F\") {\n          unitText = \"ºC\";\n        }\n\n        let forecast = weatherRoute[i].nameValuePairs.weather.nameValuePairs[\"forecast\"];\n\n        let icon = /*#__PURE__*/_jsxDEV(WbCloudy, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 28\n        }, this);\n\n        if (forecast != undefined) {\n          if (forecast.toString().toLowerCase().includes(\"snow\")) {\n            icon = /*#__PURE__*/_jsxDEV(Icon, {\n              className: \"weatherIcon\",\n              path: mdiWeatherSnowy,\n              size: 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 32\n            }, this);\n          } else if (forecast.toString().toLowerCase().includes(\"storm\")) {\n            icon = /*#__PURE__*/_jsxDEV(Icon, {\n              className: \"weatherIcon\",\n              path: mdiWeatherLightning,\n              size: 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 32\n            }, this);\n          } else if (forecast.toString().toLowerCase().includes(\"fog\") || forecast.toString().includes(\"haze\")) {\n            icon = /*#__PURE__*/_jsxDEV(Icon, {\n              className: \"weatherIcon\",\n              path: mdiWeatherFog,\n              size: 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 32\n            }, this);\n          } else if (forecast.toString().toLowerCase().includes(\"rain\")) {\n            icon = /*#__PURE__*/_jsxDEV(Icon, {\n              className: \"weatherIcon\",\n              path: mdiWeatherPouring,\n              size: 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 32\n            }, this);\n          } else if (forecast.toString().toLowerCase().includes(\"sun\")) {\n            icon = /*#__PURE__*/_jsxDEV(WbSunny, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 32\n            }, this);\n          } else if (forecast.toString().toLowerCase().includes(\"cloud\")) {\n            icon = /*#__PURE__*/_jsxDEV(WbCloudy, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 32\n            }, this);\n          }\n\n          if (i > 1 && i < weatherRoute.length - 1) {\n            if (newWeatherData[i] !== newWeatherData[i - 1]) {\n              newWeatherTiles.current.push( /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"weatherTile\",\n                children: [weatherRoute[i].nameValuePairs.coords, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 37\n                }, this), temperature + \" \" + unitText, icon, forecast]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 33\n              }, this));\n            }\n          } else {\n            newWeatherTiles.current.push( /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"weatherTile\",\n              children: [weatherRoute[i].nameValuePairs.coords, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 33\n              }, this), temperature + \" \" + unitText, icon, forecast]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 29\n            }, this));\n          }\n        }\n      }\n\n      console.log(formattedRoute);\n      console.log(formattedWeatherRoute);\n      newWeatherText.current = \"Here's the weather along your adjusted (red) route:\";\n      weatherText.current = \"Here's the weather along your unadjusted (blue) route:\";\n      displayNewWeather.current = newWeatherTiles.current;\n      newWeatherBtn.current = /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"goBtn2\",\n        onClick: () => {\n          openInGMaps(formattedWeatherRoute);\n        },\n        children: \"Open Weather Adjusted (Red) Route in Google Maps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 37\n      }, this);\n    } else {\n      newWeatherText.current = \"Here's the weather along your route:\";\n    }\n  }, [props.unit]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Results\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Map, {\n          zoomLevel: 10,\n          loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 41\n          }, this),\n          containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `400px`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 43\n          }, this),\n          mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 37\n          }, this),\n          googleMapURL: \"AIzaSyAGXweTXgAymoZ3eU43wy1YdKkiWeW6qpM\",\n          route: formattedRoute.current,\n          weatherRoute: formattedWeatherRoute.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"googleMapsBtnContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"goBtn2\",\n            onClick: () => {\n              openInGMaps(formattedRoute);\n            },\n            children: \"Open in Google Maps\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 25\n          }, this), newWeatherBtn.current]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"generalLabel\",\n          children: newWeatherText.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this), displayNewWeather.current, /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"divider2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"generalLabel\",\n          children: weatherText.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"stopsList\",\n          children: weatherTiles.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Results, \"OiWYgKOdd00RpBfUvdY2414fTws=\");\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/naveen/cs0320/term-project-amanjal-igurland-jpate-nsharm25/frontend/src/Results.js"],"names":["React","useEffect","useRef","Map","Image","WbCloudy","WbSunny","mdiWeatherPouring","mdiWeatherSnowy","mdiWeatherLightning","mdiWeatherFog","Icon","colors","rgbToHex","Results","props","formattedRoute","formattedWeatherRoute","weatherData","newWeatherData","newWeatherText","weatherText","displayNewWeather","newWeatherBtn","weatherTiles","newWeatherTiles","route","weatherRoute","convertToCelsius","temp","Math","round","setTimeout","setUnits","openInGMaps","request_url","current","lat","lng","console","log","i","length","window","open","location","state","nameValuePairs","normal_route","weather_route","newNode","parseFloat","coords","push","weather","forecast","wind","icon","temperature","unit","unitText","undefined","toString","toLowerCase","includes","height"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, {useEffect, useRef} from \"react\";\nimport Map from \"./Map\";\nimport {Image, WbCloudy, WbSunny} from \"@material-ui/icons\";\nimport { mdiWeatherPouring, mdiWeatherSnowy, mdiWeatherLightning, mdiWeatherFog} from '@mdi/js';\nimport {Icon} from \"@mdi/react\";\nimport {colors, rgbToHex} from \"@material-ui/core\";\n\n\nfunction Results(props) {\n\n    const formattedRoute = useRef([]);\n    const formattedWeatherRoute = useRef([]);\n    const weatherData = useRef([]);\n    const newWeatherData = useRef([]);\n\n    const newWeatherText = useRef(\"\");\n    const weatherText = useRef(\"\");\n\n    const displayNewWeather = useRef(null);\n\n    const newWeatherBtn = useRef(null);\n\n    const weatherTiles = useRef([]);\n    const newWeatherTiles = useRef([]);\n\n    let route;\n    let weatherRoute;\n\n    function convertToCelsius(temp) {\n        return Math.round((temp - 32) * (5/9))\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            props.setUnits(\"C\")\n            props.setUnits(\"F\");\n        } , 10);\n    }, [])\n\n    function openInGMaps(route) {\n        let request_url = \"https://www.google.com/maps/dir/?api=1&travelmode=driving&origin=\"\n            + route.current[0].lat + \"%2C\" + route.current[0].lng\n            + \"&waypoints=\";\n\n        console.log(request_url);\n\n        // generate url with directions param\n\n        for (let i = 1; i < route.current.length - 1; i++) {\n            request_url += route.current[i].lat + \"%2C\" + route.current[i].lng + \"%7C\"\n        }\n        request_url += \"&destination=\"\n            + route.current[route.current.length - 1].lat + \"%2C\" + route.current[route.current.length - 1].lng\n\n        window.open(request_url);\n    }\n\n    useEffect(() => {\n\n        console.log(props.location.state);\n\n        route = props.location.state.nameValuePairs.normal_route;\n        weatherRoute = props.location.state.nameValuePairs.weather_route;\n        weatherData.current = [];\n        weatherTiles.current = [];\n        newWeatherTiles.current = [];\n        formattedRoute.current = [];\n        formattedWeatherRoute.current = [];\n\n        for (let i = 0; i < route.length; i++) {\n            const newNode = {\n                lat: parseFloat(route[i].nameValuePairs.coords[0]),\n                lng: parseFloat(route[i].nameValuePairs.coords[1])\n            }\n            formattedRoute.current.push(newNode);\n\n            weatherData.current.push(\n                {\n                    temp: route[i].nameValuePairs.weather.nameValuePairs[\"temp\"],\n                    forecast: route[i].nameValuePairs.weather.nameValuePairs[\"forecast\"],\n                    wind: route[i].nameValuePairs.weather.nameValuePairs[\"wind\"],\n                    icon: route[i].nameValuePairs.weather.nameValuePairs[\"icon\"]\n                }\n            )\n\n            let temperature = parseFloat(route[i].nameValuePairs.weather.nameValuePairs[\"temp\"]);\n\n            if (props.unit == \"F\") {\n                temperature = convertToCelsius(temperature);\n            }\n\n            let unitText = \"ºF\";\n\n            if (props.unit == \"F\") {\n                unitText = \"ºC\";\n            }\n\n            let forecast = route[i].nameValuePairs.weather.nameValuePairs[\"forecast\"];\n            let icon = <WbCloudy></WbCloudy>;\n\n            console.log(forecast)\n\n            if (forecast != undefined) {\n                if (forecast.toString().toLowerCase().includes(\"snow\")) {\n                    icon = <Icon className=\"weatherIcon\" path={mdiWeatherSnowy} size={1}/>\n                } else if (forecast.toString().toLowerCase().includes(\"storm\")) {\n                    icon = <Icon className=\"weatherIcon\" path={mdiWeatherLightning} size={1}/>\n                } else if (forecast.toString().toLowerCase().includes(\"fog\") || forecast.toString().includes(\"haze\")) {\n                    icon = <Icon className=\"weatherIcon\" path={mdiWeatherFog} size={1}/>\n                } else if (forecast.toString().toLowerCase().includes(\"rain\")) {\n                    icon = <Icon className=\"weatherIcon\" path={mdiWeatherPouring} size={1}/>\n                } else if (forecast.toString().toLowerCase().includes(\"sun\")) {\n                    icon = <WbSunny></WbSunny>\n                } else if (forecast.toString().toLowerCase().includes(\"cloud\")) {\n                    icon = <WbCloudy></WbCloudy>\n                }\n                if (i > 1 && i < route.length - 1) {\n                    if (weatherData[i] != weatherData[i - 1]) {\n                        weatherTiles.current.push(\n                            <li className={\"weatherTile\"}>\n                                {route[i].nameValuePairs.coords}\n                                <p></p>\n                                {temperature + \" \" + unitText}\n                                {icon}\n                                {forecast}\n                            </li>\n                        )\n                    }\n                } else {\n                    weatherTiles.current.push(\n                        <li className={\"weatherTile\"}>\n                            {route[i].nameValuePairs.coords}\n                            <p></p>\n                            {temperature + \" \" + unitText}\n                            {icon}\n                            {forecast}\n                        </li>)\n                }\n            }\n        }\n\n        if (weatherRoute != undefined) {\n            for (let i = 0; i < weatherRoute.length; i++) {\n                const newNode = {\n                    lat: parseFloat(weatherRoute[i].nameValuePairs.coords[0]),\n                    lng: parseFloat(weatherRoute[i].nameValuePairs.coords[1])\n                }\n                formattedWeatherRoute.current.push(newNode);\n                    newWeatherData.current.push(\n                        {\n                            temp: weatherRoute[i].nameValuePairs.weather.nameValuePairs[\"temp\"],\n                            forecast: weatherRoute[i].nameValuePairs.weather.nameValuePairs[\"forecast\"],\n                            wind: weatherRoute[i].nameValuePairs.weather.nameValuePairs[\"wind\"]\n                        }\n                    )\n\n                let temperature = parseFloat(weatherRoute[i].nameValuePairs.weather.nameValuePairs[\"temp\"]);\n\n                if (props.unit == \"F\") {\n                    temperature = convertToCelsius(temperature);\n                }\n\n                let unitText = \"ºF\";\n\n                if (props.unit == \"F\") {\n                    unitText = \"ºC\";\n                }\n\n                let forecast = weatherRoute[i].nameValuePairs.weather.nameValuePairs[\"forecast\"];\n                let icon = <WbCloudy></WbCloudy>;\n\n                if(forecast != undefined) {\n                    if (forecast.toString().toLowerCase().includes(\"snow\")) {\n                        icon = <Icon className=\"weatherIcon\" path={mdiWeatherSnowy} size={1}/>\n                    } else if (forecast.toString().toLowerCase().includes(\"storm\")) {\n                        icon = <Icon className=\"weatherIcon\" path={mdiWeatherLightning} size={1}/>\n                    } else if (forecast.toString().toLowerCase().includes(\"fog\") || forecast.toString().includes(\"haze\")) {\n                        icon = <Icon className=\"weatherIcon\" path={mdiWeatherFog} size={1}/>\n                    } else if (forecast.toString().toLowerCase().includes(\"rain\")) {\n                        icon = <Icon className=\"weatherIcon\" path={mdiWeatherPouring} size={1}/>\n                    } else if (forecast.toString().toLowerCase().includes(\"sun\")) {\n                        icon = <WbSunny></WbSunny>\n                    } else if (forecast.toString().toLowerCase().includes(\"cloud\")) {\n                        icon = <WbCloudy></WbCloudy>\n                    }\n\n                    if (i > 1 && i < weatherRoute.length - 1) {\n                        if (newWeatherData[i] !== newWeatherData[i - 1]) {\n                            newWeatherTiles.current.push(\n                                <li className={\"weatherTile\"}>\n                                    {weatherRoute[i].nameValuePairs.coords}\n                                    <p></p>\n                                    {temperature + \" \" + unitText}\n                                    {icon}\n                                    {forecast}\n                                </li>\n                            )\n                        }\n                    } else {\n                        newWeatherTiles.current.push(\n                            <li className={\"weatherTile\"}>\n                                {weatherRoute[i].nameValuePairs.coords}\n                                <p></p>\n                                {temperature + \" \" + unitText}\n                                {icon}\n                                {forecast}\n                            </li>\n                        )\n                    }\n                }\n            }\n\n            console.log(formattedRoute);\n            console.log(formattedWeatherRoute);\n\n            newWeatherText.current = \"Here's the weather along your adjusted (red) route:\"\n            weatherText.current = \"Here's the weather along your unadjusted (blue) route:\"\n            displayNewWeather.current = newWeatherTiles.current;\n            newWeatherBtn.current = <button className={\"goBtn2\"} onClick={() => {openInGMaps(formattedWeatherRoute)}}>Open Weather Adjusted (Red) Route in Google Maps</button>\n        } else {\n            newWeatherText.current = \"Here's the weather along your route:\"\n        }\n\n    }, [props.unit]);\n\n    return (\n        <div className=\"Results\">\n            <div className={\"container\"}>\n                <div>\n                    <Map\n                        zoomLevel={10}\n                        loadingElement={<div style={{ height: `100%` }} />}\n                        containerElement={<div style={{ height: `400px` }} />}\n                        mapElement={<div style={{ height: `100%` }} />}\n                        googleMapURL='AIzaSyAGXweTXgAymoZ3eU43wy1YdKkiWeW6qpM'\n                        route={formattedRoute.current}\n                        weatherRoute={formattedWeatherRoute.current}>\n                    </Map>\n                    <div className={\"googleMapsBtnContainer\"}>\n                        <button className={\"goBtn2\"} onClick={() => {openInGMaps(formattedRoute)}}>Open in Google Maps</button>\n                        {newWeatherBtn.current}\n                    </div>\n                </div>\n                <hr className={\"divider\"}></hr>\n                <div>\n                    <label className={\"generalLabel\"}>{newWeatherText.current}</label>\n                    {displayNewWeather.current}\n                    <hr className={\"divider2\"}></hr>\n                    <label className={\"generalLabel\"}>{weatherText.current}</label>\n                    <ul className={\"stopsList\"}>{weatherTiles.current}</ul>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}